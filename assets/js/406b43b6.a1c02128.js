(self.webpackChunkdoc_ops=self.webpackChunkdoc_ops||[]).push([[8154],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),m=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=m(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),s=m(n),d=i,f=s["".concat(p,".").concat(d)]||s[d]||u[d]||a;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=s;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var m=2;m<a;m++)o[m]=n[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},537:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return m},toc:function(){return c},default:function(){return s}});var r=n(2122),i=n(9756),a=(n(7294),n(3905)),o=["components"],l={},p="Meeting Notes",m={unversionedId:"meeting-notes/README",id:"meeting-notes/README",isDocsHomePage:!1,title:"Meeting Notes",description:"Next Meeting",source:"@site/docs/meeting-notes/README.md",sourceDirName:"meeting-notes",slug:"/meeting-notes/README",permalink:"/docs/meeting-notes/README",editUrl:"https://github.com/iotaledger/identity.rs/edit/dev/documentation/docs/meeting-notes/README.md",tags:[],version:"current",frontMatter:{}},c=[{value:"Next Meeting",id:"next-meeting",children:[]},{value:"Past Meetings",id:"past-meetings",children:[]},{value:"Meeting Workflows",id:"meeting-workflows",children:[{value:"Pre Meeting",id:"pre-meeting",children:[]},{value:"While the Meeting",id:"while-the-meeting",children:[]},{value:"After the Meeting",id:"after-the-meeting",children:[]}]}],u={toc:c};function s(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"meeting-notes"},"Meeting Notes"),(0,a.kt)("h2",{id:"next-meeting"},"Next Meeting"),(0,a.kt)("p",null,"Wednesday, 2020-09-16 - 17:00 to 18:00 (CEST) "),(0,a.kt)("h2",{id:"past-meetings"},"Past Meetings"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/meeting-notes/2020-09-09"},"2020-09-09")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/meeting-notes/2020-09-02"},"2020-09-02")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/meeting-notes/2020-08-19"},"2020-08-19")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/meeting-notes/2020-08-12"},"2020-08-12")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/meeting-notes/2020-08-07"},"2020-08-07")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/meeting-notes/2020-08-05"},"2020-08-05")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/meeting-notes/2020-07-29"},"2020-07-29")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/meeting-notes/2020-07-28"},"2020-07-28")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/meeting-notes/2020-07-27"},"2020-07-27"))),(0,a.kt)("h2",{id:"meeting-workflows"},"Meeting Workflows"),(0,a.kt)("h3",{id:"pre-meeting"},"Pre Meeting"),(0,a.kt)("p",null,"Add your topics as comment to the specific pull request (recognizable by the label ",(0,a.kt)("inlineCode",{parentName:"p"},"meeting"),") "),(0,a.kt)("h3",{id:"while-the-meeting"},"While the Meeting"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Add the meeting notes to the hackmd file.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Edit ",(0,a.kt)("inlineCode",{parentName:"li"},"Participants")),(0,a.kt)("li",{parentName:"ul"},"Notice questions and decisions"),(0,a.kt)("li",{parentName:"ul"},"KISS - ",(0,a.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/KISS_principle"},"keep it stupid simple"))))),(0,a.kt)("h3",{id:"after-the-meeting"},"After the Meeting"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Finish the Meeting")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Copy the content from the hackmd file to the prepared file and push it to the specific branch."),(0,a.kt)("li",{parentName:"ul"},"Make the pull request ",(0,a.kt)("inlineCode",{parentName:"li"},"Ready for review")," on GitHub.")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Prepare the next meeting")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create a new file from the ",(0,a.kt)("a",{parentName:"li",href:"_template.md"},"template")," with the current date as filename."),(0,a.kt)("li",{parentName:"ul"},"Create a new branch (in draft mode) with the name ",(0,a.kt)("inlineCode",{parentName:"li"},"(upcoming) meeting/<date>"),", create a pull request and tag it with `meeting``"),(0,a.kt)("li",{parentName:"ul"},"Create a new ",(0,a.kt)("a",{parentName:"li",href:"https://hackmd.io/"},"hackmd")," file, add the template content and link it to the pull request description.")))}s.isMDXComponent=!0}}]);